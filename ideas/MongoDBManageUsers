https://docs.mongodb.org/v3.0/tutorial/deploy-replica-set-with-auth/
https://docs.mongodb.org/v3.0/tutorial/deploy-replica-set-with-auth/
http://wheelsarch.com/tag/mongodb-keyfile/
http://igorbicanic.blogspot.com/2014/11/install-and-configure-mongodb-replica.html
http://software.danielwatrous.com/mongodb-authentication-setup/


1) Start mongod with undernoted mongod.conf

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					mongod.conf
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------					
					
dbpath=D:\mongoData
logpath=D:\mongoData\log\mongod.log
logappend=true
nojournal = false
port = 27016
bind_ip = 172.18.128.79

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------					

2) login to mongo shell  :: mongo 172.18.128.79:27016

use admin
db.createUser(
  {
    user: "admin",
    pwd: "12345678",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
)

use admin
db.createUser( {
    user: "rootAdmin",
    pwd: "12345678",
    roles: [ { role: "root", db: "admin" } ]
  });


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				Defect In Mongo 3.0 (Users can't authenticate with authenticationMechanisms=MONGODB-CR)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	

//https://jira.mongodb.org/browse/SERVER-17459
//http://stackoverflow.com/questions/29006887/mongodb-cr-authentication-failed

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				Work Around of Defect In Mongo 3.0 (Users can't authenticate with authenticationMechanisms=MONGODB-CR)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	


var schema = db.system.version.findOne({"_id" : "authSchema"})

schema.currentVersion = 3

db.system.version.save(schema)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	


3) Restart Mmogod with undernoted mongod.conf (add auth=true property in mongod.conf)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					mongod.conf
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		

dbpath=D:\mongoData
logpath=D:\mongoData\log\mongod.log
logappend=true
nojournal = false
port = 27016
bind_ip = 172.18.128.79
auth=true
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		

4) login to mongo shell  :: mongo 172.18.128.79:27016  -u admin -p 12345678 --authenticationDatabase admin

5) Add additional Users from mongo shell:-

use myAppDB
db.createUser(
    {
      user: "myAppDBAdmin",
      pwd: "12345678",
      roles: [
         { role: "userAdmin", db: "myAppDB" }
      ]
    }
)


use myAppDB
db.createUser(
    {
      user: "myAppManagerApp",
      pwd: "12345678",
      roles: [
         { role: "readWrite", db: "myAppDB" }
      ]
    }
)

MongoClientOptions mongoClientOptions = MongoClientOptions.builder()
		.writeConcern(WriteConcern.JOURNALED)
		.build();

	ServerAddress serverAddress = new ServerAddress(mongoConfiguration.getHost(), mongoConfiguration.getPort());
	
	//MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential("myAppManagerApp", "myAppDB","12345678".toCharArray());
	MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential("myAppManagerApp", mongoConfiguration.getAuthenticationDatabase(),"12345678".toCharArray());
	
	Mongo mongo = new MongoClient(serverAddress,Arrays.asList(createMongoCRCredential),mongoClientOptions);

@Override
    @Bean
    public MongoTemplate mongoTemplate() throws Exception {
	
	//MongoDbFactory mongoDbFactory = new SimpleMongoDbFactory(mongo(), "myAppDB");
	MongoDbFactory mongoDbFactory = new SimpleMongoDbFactory(mongo(), mongoConfiguration.getDatabaseName());
	MongoTemplate mongoTemplate = new MongoTemplate(mongoDbFactory, mappingMongoConverter());
	return mongoTemplate;
    }





 private Mongo replicaSet() throws Exception {
	Mongo mongo = null;
	
	MongoClientOptions mongoClientOptions = MongoClientOptions.builder().connectionsPerHost(mongoConfiguration.getConnectionsPerHost())
			//.writeConcern(WriteConcern.REPLICA_ACKNOWLEDGED)
			.writeConcern(WRITE_CONCERN_JOURNALED_REPLICA_ACKNOLEDGED)
			.build();

	List<ServerAddress> mongosReplicaSets = new ArrayList<ServerAddress>();

	List<String> replicaSetMembers = Arrays.asList(mongoConfiguration.getReplicatSetHosts().split(","));
	ServerAddress curReplicaSetMember = null;
	String[] curReplicaSetMemberHostAndPort = null;
	for (String curReplicaSetMemberAsString : replicaSetMembers) {
	    curReplicaSetMemberHostAndPort = curReplicaSetMemberAsString.split(":");
	    curReplicaSetMember = new ServerAddress(curReplicaSetMemberHostAndPort[0], Integer.valueOf(curReplicaSetMemberHostAndPort[1]));
	    mongosReplicaSets.add(curReplicaSetMember);
	}
	
	MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	mongo = new MongoClient(mongosReplicaSets,Arrays.asList(createMongoCRCredential),mongoClientOptions);

	return mongo;
    }
    
    private Mongo shardedCluster() throws Exception {
	Mongo mongo = null;
	
	MongoClientOptions mongoClientOptions = MongoClientOptions.builder().connectionsPerHost(mongoConfiguration.getConnectionsPerHost())
                                                                	    .threadsAllowedToBlockForConnectionMultiplier(mongoConfiguration.getThreadsAllowedToBlockForConnectionMultiplier())
                                                                	    .connectTimeout(mongoConfiguration.getConnectTimeout())
                                                                	    .maxWaitTime(mongoConfiguration.getMaxWaitTime())
                                                                	    .socketKeepAlive(mongoConfiguration.isSocketKeepAlive())
                                                                	    .socketTimeout(mongoConfiguration.getSocketTimeout())
                                                                	    //.writeConcern(WriteConcern.REPLICA_ACKNOWLEDGED)
                                                                	    .writeConcern(WRITE_CONCERN_JOURNALED_REPLICA_ACKNOLEDGED)
                                                                	    .build();

	List<ServerAddress> mongosRouters = new ArrayList<ServerAddress>();
	
	List<String> queryRouters = Arrays.asList(mongoConfiguration.getQueryRouterHosts().split(","));
	ServerAddress mongosRouter = null;
	String[] queryRouterHostAndPort = null;
	for (String curQueryRouter : queryRouters) {
	    queryRouterHostAndPort = curQueryRouter.split(":");
	    mongosRouter = new ServerAddress(queryRouterHostAndPort[0], Integer.valueOf(queryRouterHostAndPort[1]));
	    mongosRouters.add(mongosRouter);
	}
	MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	mongo = new MongoClient(mongosRouters,Arrays.asList(createMongoCRCredential),mongoClientOptions);
	
	return mongo;
    }



dbpath=D:\mongoNonSharedCluster\replSet\primary\mongoData
logpath=D:\mongoNonSharedCluster\replSet\primary\log\mongod.log
logappend=true
nojournal = false
port = 27017
bind_ip = 172.18.128.79
replSet =  replSet1
auth=true
keyFile=D:\mongoNonSharedCluster\replSet\primary\sharedkey\replicaset.key


dbpath=D:\mongoNonSharedCluster\replSet\secondary\node1\mongoData
logpath=D:\mongoNonSharedCluster\replSet\secondary\node1\log\mongod.log
logappend=true
nojournal = false
port = 27018
bind_ip = 172.18.128.79
replSet =  replSet1
keyFile=D:\mongoNonSharedCluster\replSet\secondary\node1\sharedkey\replicaset.key


dbpath=D:\mongoNonSharedCluster\replSet\secondary\node2\mongoData
logpath=D:\mongoNonSharedCluster\replSet\secondary\node2\log\mongod.log
logappend=true
nojournal = false
port = 27019
bind_ip = 172.18.128.79
replSet =  replSet1
keyFile=D:\mongoNonSharedCluster\replSet\secondary\node2\sharedkey\replicaset.key


--------------------------------



1) Start mongod with undernoted mongod.conf

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					mongod.conf
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------					
					
dbpath=D:\mongoData
logpath=D:\mongoData\log\mongod.log
logappend=true
nojournal = false
port = 27016
bind_ip = 172.18.128.79

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------					

2) login to mongo shell  :: mongo 172.18.128.79:27016

use admin
db.createUser(
  {
    user: "admin",
    pwd: "12345678",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
)

use admin
db.createUser( {
    user: "rootAdmin",
    pwd: "12345678",
    roles: [ { role: "root", db: "admin" } ]
  })

3) Restart Mmogod with undernoted mongod.conf (add auth=true property in mongod.conf)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					mongod.conf
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		

dbpath=D:\mongoData
logpath=D:\mongoData\log\mongod.log
logappend=true
nojournal = false
port = 27016
bind_ip = 172.18.128.79
auth=true
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		

4) login to mongo shell  :: mongo 172.18.128.79:27016  -u admin -p 12345678 --authenticationDatabase admin

5) Add additional Users from mongo shell:-

use MyAppDB
db.createUser(
    {
      user: "MyAppDBAdmin",
      pwd: "12345678",
      roles: [
         { role: "userAdmin", db: "MyAppDB" }
      ]
    }
)


use MyAppDB
db.createUser(
    {
      user: "MyAppManagerApp",
      pwd: "12345678",
      roles: [
         { role: "readWrite", db: "MyAppDB" }
      ]
    }
)


  compile("org.springframework.boot:spring-boot-starter-data-mongodb"){
	exclude group: 'org.mongodb', module: 'mongo-java-driver'
    }
    compile('org.mongodb:mongo-java-driver:3.0.3')


private Mongo replicaSet() throws Exception {
	Mongo mongo = null;
	
	MongoClientOptions mongoClientOptions = MongoClientOptions.builder().connectionsPerHost(mongoConfiguration.getConnectionsPerHost())
			//.writeConcern(WriteConcern.REPLICA_ACKNOWLEDGED)
			.writeConcern(WRITE_CONCERN_JOURNALED_REPLICA_ACKNOLEDGED)
			.build();

	List<ServerAddress> mongosReplicaSets = new ArrayList<ServerAddress>();

	List<String> replicaSetMembers = Arrays.asList(mongoConfiguration.getReplicatSetHosts().split(","));
	ServerAddress curReplicaSetMember = null;
	String[] curReplicaSetMemberHostAndPort = null;
	for (String curReplicaSetMemberAsString : replicaSetMembers) {
	    curReplicaSetMemberHostAndPort = curReplicaSetMemberAsString.split(":");
	    curReplicaSetMember = new ServerAddress(curReplicaSetMemberHostAndPort[0], Integer.valueOf(curReplicaSetMemberHostAndPort[1]));
	    mongosReplicaSets.add(curReplicaSetMember);
	}
	
	//MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	MongoCredential createMongoCRCredential = MongoCredential.createScramSha1Credential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	mongo = new MongoClient(mongosReplicaSets,Arrays.asList(createMongoCRCredential),mongoClientOptions);

	return mongo;
    }
    
    private Mongo shardedCluster() throws Exception {
	Mongo mongo = null;
	
	MongoClientOptions mongoClientOptions = MongoClientOptions.builder().connectionsPerHost(mongoConfiguration.getConnectionsPerHost())
                                                                	    .threadsAllowedToBlockForConnectionMultiplier(mongoConfiguration.getThreadsAllowedToBlockForConnectionMultiplier())
                                                                	    .connectTimeout(mongoConfiguration.getConnectTimeout())
                                                                	    .maxWaitTime(mongoConfiguration.getMaxWaitTime())
                                                                	    .socketKeepAlive(mongoConfiguration.isSocketKeepAlive())
                                                                	    .socketTimeout(mongoConfiguration.getSocketTimeout())
                                                                	    //.writeConcern(WriteConcern.REPLICA_ACKNOWLEDGED)
                                                                	    .writeConcern(WRITE_CONCERN_JOURNALED_REPLICA_ACKNOLEDGED)
                                                                	    .build();

	List<ServerAddress> mongosRouters = new ArrayList<ServerAddress>();
	
	List<String> queryRouters = Arrays.asList(mongoConfiguration.getQueryRouterHosts().split(","));
	ServerAddress mongosRouter = null;
	String[] queryRouterHostAndPort = null;
	for (String curQueryRouter : queryRouters) {
	    queryRouterHostAndPort = curQueryRouter.split(":");
	    mongosRouter = new ServerAddress(queryRouterHostAndPort[0], Integer.valueOf(queryRouterHostAndPort[1]));
	    mongosRouters.add(mongosRouter);
	}
	//MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	MongoCredential createMongoCRCredential = MongoCredential.createScramSha1Credential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	mongo = new MongoClient(mongosRouters,Arrays.asList(createMongoCRCredential),mongoClientOptions);
	
	return mongo;
    }
    
    
    private Mongo standAlone() throws Exception {
	MongoClientOptions mongoClientOptions = MongoClientOptions.builder()
		.writeConcern(WriteConcern.JOURNALED)
		.build();

	ServerAddress serverAddress = new ServerAddress(mongoConfiguration.getHost(), mongoConfiguration.getPort());
	
	//MongoCredential createMongoCRCredential = MongoCredential.createMongoCRCredential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	MongoCredential createMongoCRCredential = MongoCredential.createScramSha1Credential(mongoConfiguration.getDatabaseUserName(), mongoConfiguration.getAuthenticationDatabase(),mongoConfiguration.getDatabasePassword().toCharArray());
	Mongo mongo = new MongoClient(serverAddress,Arrays.asList(createMongoCRCredential),mongoClientOptions);
	return mongo;
    }
