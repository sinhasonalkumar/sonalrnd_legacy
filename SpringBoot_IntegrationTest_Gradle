import groovy.json.JsonSlurper

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE") }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
    baseName = 'batchIntTest'
    version =  '0.1.0'
}

repositories { mavenCentral() }

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.hateoas:spring-hateoas")
    compile("org.springframework.security:spring-security-web:4.0.1.RELEASE")
    compile("org.springframework.security:spring-security-core:4.0.1.RELEASE")
    compile("org.springframework.security:spring-security-aspects:4.0.1.RELEASE")
    compile("org.springframework.security:spring-security-config:4.0.1.RELEASE")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.0.7.RELEASE")
    compile("org.springframework:spring-test:4.1.6.RELEASE")
    compile("org.projectlombok:lombok:1.16.4")

    compile("org.apache.httpcomponents:httpclient:4.3.4")
    compile("org.apache.httpcomponents:httpasyncclient:4.0.1")
    compile("org.apache.httpcomponents:httpmime:4.3.4")
    compile("org.apache.logging.log4j:log4j-api:2.2")
    compile("org.apache.logging.log4j:log4j-core:2.2")

    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-core:1.10.19")
    testCompile("org.hamcrest:hamcrest-all:1.3")
    compile("com.jayway.jsonpath:json-path-parent:1.1.0")
    compile("com.jayway.jsonpath:json-path-assert:1.1.0")
    compile("com.jayway.jsonpath:json-path:1.1.0")

}

test {
    maxHeapSize = "1024m"
    jvmArgs "-XX:MaxPermSize=256m"
    dependsOn ':batchMgr:bootRepackage'
    dependsOn ':batchBatch:bootRepackage'

    beforeSuite {
	println "Running manager ${project(':batchMgr').jar.outputs.files.singleFile}"
	ant.java( fork:true, spawn:true, jar:"${project(':batchMgr').jar.outputs.files.singleFile}"){
	    [
		arg(value:"--server.port=8080"),
		arg(value:"--management.port=9000"),
		arg(value:"--management.address=127.0.0.1"),
		arg(value:"--management.context-path=/actuator"),
		arg(value:"--endpoints.shutdown.enabled=true")
	    ]
	}
	println "Running agent1 ${project(':batchBatch').jar.outputs.files.singleFile}"
	ant.java( fork:true, spawn:true, jar:"${project(':batchBatch').jar.outputs.files.singleFile}"){
	    [
		arg(value:"--server.port=8081"),
		arg(value:"--management.port=9001"),
		arg(value:"--management.address=127.0.0.1"),
		arg(value:"--management.context-path=/actuator"),
		arg(value:"--endpoints.shutdown.enabled=true")
	    ]
	}
	println "Running agent2 ${project(':batchBatch').jar.outputs.files.singleFile}"
	ant.java( fork:true, spawn:true, jar:"${project(':batchBatch').jar.outputs.files.singleFile}"){
	    [
		arg(value:"--server.port=8082"),
		arg(value:"--management.port=9002"),
		arg(value:"--management.address=127.0.0.1"),
		arg(value:"--management.context-path=/actuator"),
		arg(value:"--endpoints.shutdown.enabled=true")
	    ]
	}
	checkServerHealth("batchMgr",9000)
	checkServerHealth("BatchNode_Agent_1",9001)
	checkServerHealth("BatchNode_Agent_2",9002)
    }
    afterSuite   {
	shutdownServer("batchMgr",9000)
	shutdownServer("BatchNode_Agent_1",9001)
	shutdownServer("BatchNode_Agent_2",9002)
    }
}

def checkServerHealth(String service, int port) {
    int count = 0;
    boolean isServerUp = false;
    while(count != 10){
	try{
	    def response = ['curl', "http://localhost:"+ port + "/actuator/health"].execute();
	    response.waitFor()
	    def responseJson = new JsonSlurper().parseText(response.text)
	    if(responseJson.status.equals("UP")){
		println(":: "+ service + " :: Service is Up and Running !!")
		isServerUp = true;
		break
	    }else{
		continue
		count++
		Thread.sleep(300)
	    }
	} catch (Exception e) {
	    println(":: "+ service + " :: Service is Not Up Yet !!")
	}
    }
    if(!isServerUp){
	throw new GradleException(":: "+ service + " :: Service  is Down !!")
    }
}


def shutdownServer(String service, int port){
    try{
	def response = ['curl','-X','POST', "http://localhost:"+ port + "/actuator/shutdown"].execute();
	response.waitFor()
	def responseJson = new JsonSlurper().parseText(response.text)
	println(":: "+ service + " :: Service Shutdown Successfully !!")
    } catch (Exception e) {
	println(":: "+ service + " :: Shutdown Already")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
